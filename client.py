import socket
import threading
import time
import os
from cryptography.fernet import Fernet # type: ignore

# Shared encryption key (must match the server's key)
key = b'YOUR_KEY_HERE'  # Replace 'YOUR_KEY_HERE' with the key generated by the server
cipher_suite = Fernet(key)

# Client setup
client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client.connect(('localhost', 5555))

# Function to receive messages from the server
def receive_messages():
    while True:
        try:
            # Receive encrypted message from server
            encrypted_message = client.recv(1024)
            if encrypted_message:
                # Decrypt and show the message with burn effect
                decrypted_message = cipher_suite.decrypt(encrypted_message).decode('utf-8')
                show_message_with_burn_effect(decrypted_message)
        except Exception as e:
            print("An error occurred:", e)
            client.close()
            break

# Function to send messages to the server
def send_message():
    while True:
        message = input("Enter your message: ")
        # Encrypt the message before sending
        encrypted_message = cipher_suite.encrypt(message.encode('utf-8'))
        client.send(encrypted_message)

# Function to display and burn away the message
def show_message_with_burn_effect(message, delay=3):
    os.system('cls' if os.name == 'nt' else 'clear')
    print("Message received:\n")
    print(message)
    time.sleep(delay)

    # Clear screen effect with "burn" animation
    os.system('cls' if os.name == 'nt' else 'clear')
    print("ğŸ”¥ " + "BURNING MESSAGE" + " ğŸ”¥")
    
    burn_animation = [
        "ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥",
        "ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥",
        "ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥",
        "ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥",
        "ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥",
        "ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥",
        "ğŸ”¥ğŸ”¥",
        "ğŸ’€"
    ]
    
    for frame in burn_animation:
        print("\r" + frame, end="")
        time.sleep(0.5)
    
    time.sleep(1)
    os.system('cls' if os.name == 'nt' else 'clear')
    print("The message has been burned and no longer exists.")

# Start threads for receiving and sending messages
receive_thread = threading.Thread(target=receive_messages)
receive_thread.start()

send_thread = threading.Thread(target=send_message)
send_thread.start()
